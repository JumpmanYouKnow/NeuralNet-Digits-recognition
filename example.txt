
32x32 normalized bitmaps of handwritten digits from various hand
writers were obtained. The 32x32 bitmaps were divided into
non-overlapping blocks of 4x4 and the number of on pixels are
counted in each block. This generates an input matrix of 8x8
where each element is an integer in the range 0..16. This reduces
dimensionality and gives invariance to small distortions.

Example: 32x32 normalized bitmap of a handwritten "5"
-----------------------------------------------------

00000000000001100111100000000000
00000000000111111111111111000000
00000000011111111111111111110000
00000000011111111111111111110000
00000000011111111101000001100000
00000000011111110000000000000000
00000000111100000000000000000000
00000001111100000000000000000000
00000001111100011110000000000000
00000001111100011111000000000000
00000001111111111111111000000000
00000001111111111111111000000000
00000001111111111111111110000000
00000001111111111111111100000000
00000001111111100011111110000000
00000001111110000001111110000000
00000001111100000000111110000000
00000001111000000000111110000000
00000000000000000000001111000000
00000000000000000000001111000000
00000000000000000000011110000000
00000000000000000000011110000000
00000000000000000000111110000000
00000000000000000001111100000000
00000000001110000001111100000000
00000000001110000011111100000000
00000000001111101111111000000000
00000000011111111111100000000000
00000000011111111111000000000000
00000000011111111110000000000000
00000000001111111000000000000000
00000000000010000000000000000000

 5

The 32x32 bitmap is divided into blocks of 4x4.

0000 0000 0000 0110 0111 1000 0000 0000
0000 0000 0001 1111 1111 1111 1100 0000
0000 0000 0111 1111 1111 1111 1111 0000
0000 0000 0111 1111 1111 1111 1111 0000

0000 0000 0111 1111 1101 0000 0110 0000
0000 0000 0111 1111 0000 0000 0000 0000
0000 0000 1111 0000 0000 0000 0000 0000
0000 0001 1111 0000 0000 0000 0000 0000

0000 0001 1111 0001 1110 0000 0000 0000
0000 0001 1111 0001 1111 0000 0000 0000
0000 0001 1111 1111 1111 1110 0000 0000
0000 0001 1111 1111 1111 1110 0000 0000

0000 0001 1111 1111 1111 1111 1000 0000
0000 0001 1111 1111 1111 1111 0000 0000
0000 0001 1111 1110 0011 1111 1000 0000
0000 0001 1111 1000 0001 1111 1000 0000

0000 0001 1111 0000 0000 1111 1000 0000
0000 0001 1110 0000 0000 1111 1000 0000
0000 0000 0000 0000 0000 0011 1100 0000
0000 0000 0000 0000 0000 0011 1100 0000

0000 0000 0000 0000 0000 0111 1000 0000
0000 0000 0000 0000 0000 0111 1000 0000
0000 0000 0000 0000 0000 1111 1000 0000
0000 0000 0000 0000 0001 1111 0000 0000

0000 0000 0011 1000 0001 1111 0000 0000
0000 0000 0011 1000 0011 1111 0000 0000
0000 0000 0011 1110 1111 1110 0000 0000
0000 0000 0111 1111 1111 1000 0000 0000

0000 0000 0111 1111 1111 0000 0000 0000
0000 0000 0111 1111 1110 0000 0000 0000
0000 0000 0011 1111 1000 0000 0000 0000
0000 0000 0000 1000 0000 0000 0000 0000

 5

The number of on pixels are counted in each block.
This generates an input matrix of 8x8 which is
then "linearized" into a training example where
the last entry in the training example is the value
of the class variable.

0,0,7,14,15,13,10,0,0,1,12,8,...,8,0,0,0,5

